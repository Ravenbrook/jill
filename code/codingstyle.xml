<?xml version="1.0"?>
<!DOCTYPE module PUBLIC
    "-//Puppy Crawl//DTD Check Configuration 1.1//EN"
    "http://www.puppycrawl.com/dts/configuration_1_1.dtd">


<module name="Checker">

    <module name="NewlineAtEndOfFile"/>

    <module name="TreeWalker">
        <!--    Bloch checks    -->

        <!-- Item 4 - Avoid creating duplicate objects -->
        <module name="IllegalInstantiation">
        <property name="classes" value="java.lang.Boolean, java.lang.String"/>
        </module>

        <!-- Item 6 - Avoid finalizers -->
        <!-- this will not find violations that contain linebreaks -->
        <module name="GenericIllegalRegexp">
            <property name="format"
                value="((public)|(protected))\s+void\s+finalize\(\s*\)"/>
        </module>

        <!-- Item 8 - Always override hashCode when you override equals -->
        <module name="EqualsHashCode"/>

        <!-- Item 12 - Make all fields private -->
<!--
        <module name="VisibilityModifier"/>
-->

        <!-- Item 15 - Design and document for inheritance or else prohibit it -->
        <!-- the module actually implements a very strict rule, it would be
             interesting to know whether Joshua meant what checkstyle implements.
             We feel this implementation is well suited as a warning,
             i.e. if you get error messages from this check you should be
             able to name a good reason to implement your code the way you do it,
             especially if you are designing a library and not an application. -->
<!--
        <module name="DesignForExtension">
            <property name="severity" value="warning"/>
        </module>
-->

        <!-- Item 17 - Use interfaces only to define types -->
        <module name="InterfaceIsType"/>

        <!-- Item 25 - Design method signatures carefully -->
        <!-- Avoid long parameter lists -->
        <module name="ParameterNumber">
            <property name="max" value="4"/>
        </module>

        <!-- Item 26 - Use overloading judiciously -->
        <!-- rfe #659735 -->

        <!-- Item 27 - Return zero-length array, not nulls -->
        <!-- no rfe yet -->

        <!-- Item 28 - Write doc comments for all exposed API elements -->
        <module name="JavadocType">
            <property name="scope" value="protected"/>
        </module>
        <module name="JavadocMethod"> <!-- also covers Item 44 -->
            <property name="scope" value="protected"/>
	    <property name="allowThrowsTagsForSubclasses" value="true"/>
	    <property name="allowUndeclaredRTE" value="true"/>
        </module>
        <module name="JavadocVariable">
            <property name="scope" value="protected"/>
        </module>

        <!-- Item 29 - Minimize the scope of local variables -->
        <!-- no rfe yet -->


        <!-- Item 38 - Adhere to generally accepted naming conventions -->
        <module name="PackageName">
            <!-- no uppercase letters, between 2 and 8 characters -->
            <property name="format" value="^[a-z]+(\.[a-z][a-z0-9]*)*$"/>
        </module>
        <module name="TypeName"/>
        <module name="ConstantName"/>
        <module name="LocalFinalVariableName"/>
        <module name="LocalVariableName">
          <property name="format"
              value="^[a-z][a-zA-Z0-9]*_?" />
        </module>
        <module name="MemberName">
          <property name="format"
              value="^(([a-z][a-zA-Z0-9]*)|L)$" />
        </module>
        <module name="MethodName">
          <property name="format"
              value="^(([a-z][a-zA-Z0-9]*)|([a-z][a-z0-9_]*)|([A-Z][A-Za-z0-9_]*))$" />
        </module>
        <module name="ParameterName">
          <property name="format"
            value="^(([a-z][a-zA-Z0-9]*)|L)$" />
        </module>
        <module name="StaticVariableName"/>

        <!-- Item 47 - Don't ignore exceptions -->
        <module name="EmptyBlock">
            <property name="tokens" value="LITERAL_CATCH"/>
            <property name="option" value="text"/>
        </module>

        <!-- Item 50 - Never invoke wait outside a loop -->
        <!-- rfe #712798 -->

        <!-- Item 57 - Provide a readResolve method when necessary -->
        <!-- no rfe yet -->


        <!--    Other conventions   -->

        <module name="AvoidStarImport"/>
        <!--    <module name="IllegalImport"/>  -->
        <module name="RedundantImport"/>
        <module name="UnusedImports"/>

        <module name="FileLength"/>
        <module name="LineLength">
            <property name="max" value="120"/>
        </module>
        <module name="MethodLength">
		<property name="max" value="200"/>
		<property name="countEmpty" value="false"/>
	</module>
        <module name="AnonInnerLength"/>

        <module name="EmptyForIteratorPad">
            <property name="option" value="space"/>
        </module>
        <module name="MethodParamPad"/>
        <module name="NoWhitespaceAfter">
		<property name="tokens" value="BNOT,DEC,DOT,INC,LNOT,UNARY_MINUS,UNARY_PLUS"/>
	</module>
        <module name="NoWhitespaceBefore">
		<property name="tokens" value="DOT,POST_DEC,POST_INC"/>
	</module>
        <module name="OperatorWrap">
            <property name="option" value="eol"/>
        </module>
        <module name="ParenPad"/>
        <module name="TypecastParenPad"/>
        <module name="TabCharacter"/>
<!--
        <module name="WhitespaceAround"/>
-->

        <module name="ModifierOrder"/>
<!--
        <module name="RedundantModifier"/>
-->

        <module name="LeftCurly">
            <property name="option" value="eol"/>
        </module>
        <module name="RightCurly">
            <property name="option" value="same"/>
        </module>

        <module name="DoubleCheckedLocking"/>
        <module name="EmptyStatement"/>
        <module name="HiddenField">
          <property name="ignoreConstructorParameter" value="true" />
          <property name="ignoreSetter" value="true" />
        </module>
          
        <module name="InnerAssignment"/>
<!--
        <module name="MagicNumber">
		<property name="ignoreNumbers" value="-1,0,1,2,3,4,5,6,7,8"/>
	</module>
-->
<!--
        <module name="MissingSwitchDefault"/>
-->
	<module name="RedundantThrows">
		<property name="allowSubclasses" value="true"/>
	</module>
        <module name="SimplifyBooleanExpression"/>
        <module name="SimplifyBooleanReturn"/>

        <module name="FinalClass"/>
        <module name="HideUtilityClassConstructor"/>

        <module name="ArrayTypeStyle"/>
<!--
        <module name="FinalParameters"/>
-->
        <module name="GenericIllegalRegexp">
            <property name="format" value="\s+$"/>
            <property name="message" value="Line has trailing spaces."/>
        </module>
        <module name="TodoComment"/>
        <module name="UpperEll"/>

        <module name="CovariantEquals"/>
        <module name="DefaultComesLast"/>
        <module name="EqualsHashCode"/>
        <module name="ExplicitInitialization"/>
        <module name="FallThrough"/>
        <module name="ParameterAssignment"/>
        <module name="Header">
            <property name="headerFile" value="code/header.txt"/>
            <property name="ignoreLines" value="1,2"/>
        </module>
<!--
        <module name="IllegalCatch"/>
-->
        <module name="IllegalThrows"/>
<!--
        <module name="Indentation"/>
-->
        <module name="ModifiedControlVariable"/>
        <module name="MultipleStringLiterals">
          <property name="allowedDuplicates" value="2" />
        </module>
        <module name="MultipleVariableDeclarations"/>
        <module name="StringLiteralEquality"/>

    </module>
</module>

